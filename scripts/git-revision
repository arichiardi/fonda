#!/usr/bin/env bash

set -euo pipefail

do_usage() {
    echo -n
    echo
    echo "Compute the revision number from the latest git tag."
    echo
    echo "The revision is none other than the number of commits from the most
    recent tag, but it is important because it is reproducible."
    echo
    echo "Usage: $0 --regex <tag>"
    echo
    echo "Options:"
    echo "  -h --help        Show this screen."
    echo "  -r --regex=<tag> [OPTIONAL] The regex to be used in git describe -match."
    exit 1
}

tag_regex=

set +e
TEMP=$(getopt -o hr: --long help,regex: -n "$(basename "$0")" -- "$@")
set -e
eval set -- "$TEMP"

# extract options and their arguments into variables.
while true ; do
    case "$1" in
        -r|--regex) tag_regex="$2" ; shift 2 ;;
        -h|--help) shift ; do_usage ; break ;;
        --) shift ; break ;;
        *) do_usage ; exit 1 ;;
    esac
done

[ -n "$tag_regex" ] || do_usage

set +e
revision=$(git --no-replace-objects describe --match "$tag_regex" 2> /dev/null)
set -e

if [ -n "$revision" ]; then
    # trim everything before @
    revision=${revision##*@}

    # Extract the commit count from the revision
    revision_regex="[0-9]*\.[0-9]*.*-([0-9]*)-.*"
    if [[ $revision =~ $revision_regex ]]; then
        revision="${BASH_REMATCH[1]}"
    fi
else
    echo "Cannot find a tag for the \"$tag_regex\" regex."
    exit 1
fi

echo "$revision"
